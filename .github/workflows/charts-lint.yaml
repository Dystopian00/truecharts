name: "Charts: Lint"

on:
  workflow_call:

jobs:
  lint-and-verify:
    outputs:
      changesDetected: ${{ steps.filter.outputs.addedOrModified }}
      addedOrModifiedFiles: ${{ steps.filter.outputs.addedOrModified_files }}
      addedOrModifiedCharts: ${{ steps.filter-charts.outputs.addedOrModified }}
      changesDetectedAfterTag: ${{ steps.filter-bumped-charts.outputs.changesDetectedAfterTag }}
      modifiedChartsAfterTag: ${{ steps.filter-bumped-charts.outputs.modifiedChartsAfterTag }}
    name: Lint Charts and Verify Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3
        with:
          fetch-depth: 1
          ref: master

      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3
        with:
          fetch-depth: 1
          ref: ${{ inputs.checkoutCommit }}

      - name: Setting repo parent dir as safe safe.directory
        run: git config --global --add safe.directory "$GITHUB_WORKSPACE"

      - name: Prep Helm
        run: |
          helm repo add truecharts https://charts.truecharts.org
          helm repo add truecharts-deps https://deps.truecharts.org
          helm repo add truecharts-library https://library-charts.truecharts.org
          helm repo add truecharts-deps https://deps.truecharts.org
          helm repo update
          
      - name: Collect changed files
        uses: dorny/paths-filter@v2
        id: filter
        with:
          list-files: shell
          filters: |
            addedOrModified:
              - added|modified: 'charts/*/**'
  
      - name: Collect changed charts
        if: |
          steps.filter.outputs.addedOrModified == 'true'
        id: filter-charts
        shell: bash
        run: |
          CHARTS=()
          PATHS=(${{ steps.filter.outputs.addedOrModified_files }})
          # Get only the chart paths
          for CHARTPATH in "${PATHS[@]}"
          do
            IFS='/' read -r -a path_parts <<< "${CHARTPATH}"
            CHARTS+=("${path_parts[0]}/${path_parts[1]}/${path_parts[2]}")
          done
  
          # Remove duplicates
          CHARTS=( `printf "%s\n" "${CHARTS[@]}" | sort -u` )
          # Set output to changed charts
          echo "Changed charts: ${CHARTS[*]}"
          printf "::set-output name=addedOrModified::%s\n" "${CHARTS[*]}"
          
  
      - name: Collect bumped charts after last tag
        id: filter-bumped-charts
        shell: bash
        run: |
          lookup_latest_tag() {
              git fetch --tags > /dev/null 2>&1
  
              if ! git describe --tags --abbrev=0 2> /dev/null; then
                  git rev-list --max-parents=0 --first-parent HEAD
              fi
          }
          export -f lookup_latest_tag
  
          filter_charts() {
              while read -r chart; do
                  [[ ! -d "$chart" ]] && continue
                  if [[ $(git diff $latest_tag $chart/Chart.yaml | grep "+version") ]]; then
                      echo "$chart"
                  else
                     echo "Version not bumped. Skipping." 1>&2
                  fi
              done
          }
          export -f filter_charts
  
          lookup_changed_charts() {
              local commit="$1"
  
              local changed_files
              changed_files=$(git diff --find-renames --name-only "$commit" -- 'charts/**' | grep "Chart.yaml")
              local depth=$(( $(tr "/" "\n" <<< 'charts/**' | sed '/^\(\.\)*$/d' | wc -l) + 1 ))
              local fields="1-${depth}"
  
              cut -d '/' -f "$fields" <<< "$changed_files" | uniq | filter_charts
          }
          export -f lookup_changed_charts
  
          repo_root=$(git rev-parse --show-toplevel)
          pushd "$repo_root" > /dev/null
  
          echo 'Looking up latest tag...'
          latest_tag=$(lookup_latest_tag)
  
          echo "Discovering changed charts since '$latest_tag'..."
          changed_charts=()
          readarray -t changed_charts <<< "$(lookup_changed_charts "$latest_tag")"
  
          CHARTS=()
          for CHARTPATH in "${changed_charts[@]}"
          do
            IFS='/' read -r -a path_parts <<< "${CHARTPATH}"
            CHARTS+=("${path_parts[1]}/${path_parts[2]}")
          done
  
          # Remove duplicates
          CHARTS=( `printf "%s\n" "${CHARTS[@]}" | sort -u` )
  
          echo "Number of detected changed charts: ${#CHARTS[@]}"
          if [ ${#CHARTS[@]} -eq 0 ] || [ "${CHARTS[0]}" == ' ' ] || [ "${CHARTS[0]}" == '/' ]; then
            echo "No Changed Charts detected since latest tag..."
            printf "::set-output name=changesDetectedAfterTag::%s\n" "false"
          else
            echo "Changed Charts detected since latest tag, parsing..."
            printf "::set-output name=changesDetectedAfterTag::%s\n" "true"
  
            # Get only the chart paths
  
            # Set output to changed charts
            echo "Changed charts since latest tag: ${CHARTS[*]}"
            printf "::set-output name=modifiedChartsAfterTag::%s\n" "${CHARTS[*]}"
          fi
          popd > /dev/null
  
      - name: Process changes for lint (branch-based)
        id: list-changed
        if: inputs.chartChangesDetected == 'true'
        shell: bash
        run: |
          CHARTS="${{ inputs.modifiedCharts }}"
          echo "Modified Charts: ${CHARTS}"

          EXCLUDED_JSON=$(go-yq eval -o=json '.excluded-charts // []' .github/ct-lint.yaml)
          CHARTS_JSON=$(echo "${CHARTS}" | jq --raw-input '.' | jq --compact-output --slurp '.')
          OUTPUT_JSON=$(echo "{\"excluded\": ${EXCLUDED_JSON}, \"all\": ${CHARTS_JSON}}" | jq --compact-output '.all-.excluded')

          echo CHANGED_CHARTS=${OUTPUT_JSON} >> "$GITHUB_OUTPUT"
          if [[ $(echo ${OUTPUT_JSON} | jq --compact-output '. | length') -gt 0 ]]; then
            echo "detected=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Test and Fix Pre-Commit Issues
        shell: bash
        if: inputs.chartChangesDetected == 'true'
        run: |
          echo "Running pre-commit test-and-cleanup..."
          pre-commit run --all ||:
          # Fix sh files to always be executable
          find . -name '*.sh' | xargs chmod +x
          pre-commit run --all

      - name: Fetch and Verify dependencies
        shell: bash
        if: steps.list-changed.outputs.detected == 'true'
        env:
          charts_path: "./"
        run: |
          CHANGED=$(echo '${{ steps.list-changed.outputs.CHANGED_CHARTS }}' | jq --raw-output '.[]')
          for changed in ${CHANGED}; do
            .github/scripts/fetch_helm_deps.sh "${changed}"
          done

      - name: Run Chart Linting
        continue-on-error: true
        id: lint
        if: steps.list-changed.outputs.detected == 'true'
        env:
          result_file: /tmp/lint_result.txt
        run: |
          CHANGED=$(echo '${{ steps.list-changed.outputs.CHANGED_CHARTS }}' | jq --raw-output '.[]')
          # If the github.base_ref is empty (eg it runs outside of a PR) it fails back to origin/master
          .github/scripts/tc-lint.sh '${{ steps.list-changed.outputs.CHANGED_CHARTS }}' "origin/${{ github.base_ref }}"

      - name: Create/Update comment
        if: steps.list-changed.outputs.detected == 'true'
        continue-on-error: true
        uses: thollander/actions-comment-pull-request@632cf9ce90574d125be56b5f3405cda41a84e2fd # v2
        with:
          filePath: /tmp/lint_result.txt
          comment_tag: lint_results
          mode: recreate
          GITHUB_TOKEN: ${{ github.token }}

      - name: Lint Result
        if: steps.list-changed.outputs.detected == 'true'
        shell: bash
        run: |
          if [ "${{ steps.lint.outcome }}" != "success" ]; then
            echo "Linting failed"
            exit 1
          fi

      - uses: vishnudxb/cancel-workflow@c3c77eb4383ba7d023e6614a07d94fe990501ac6 # tag=v1.2
        if: failure()
        with:
          repo: truecharts/chart
          workflow_id: ${{ github.run_id }}
          access_token: ${{ github.token }}
