image:
  repository: ipfs/go-ipfs
  pullPolicy: IfNotPresent
  tag: v0.12.1

securityContext:
  runAsNonRoot: false
  readOnlyRootFilesystem: false

podSecurityContext:
  runAsUser: 0
  runAsGroup: 0

env:
  NODE_IP: "localhost"
  IPFS_PROFILE: "server"
  IPFS_SWARM_KEY: "randomstring"

service:
  main:
    ports:
      main:
        port: 10125
        targetPort: 5001
  peer-tcp:
    enabled: true
    ports:
      peer-tcp:
        enabled: true
        targetPort: 4001
        port: 4001
  peer-udp:
    enabled: true
    ports:
      peer-udp:
        protocol: UDP
        enabled: true
        targetPort: 4001
        port: 4001
  gateway:
    enabled: true
    type: ClusterIP
    ports:
      gateway:
        enabled: true
        targetPort: 8080
        port: 10147

probes:
  liveness:
    path: "/webui"
  readiness:
    path: "/webui"
  startup:
    path: "/webui"

persistence:
  data:
    enabled: true
    mountPath: "/data/ipfs"
  staging:
    enabled: true
    mountPath: "/export"
  ipfs:
    enabled: true
    mountPath: "/ipfs"
  ipns:
    enabled: true
    mountPath: "/ipns"

installContainers:
  1-init:
    image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
    volumeMounts:
      - name: ipfs
        mountPath: "/ipfs"
      - name: ipns
        mountPath: "/ipns"
      - name: staging
        mountPath: "/export"
      - name: data
        mountPath: "/data/ipfs"
    env:
      - name: NODE_IP
        value: "{{ .Values.env.NODE_IP }}"
      - name: IPFS_PROFILE
        value: "{{ .Values.env.IPFS_PROFILE }}"
      - name: IPFS_SWARM_KEY
        value: "{{ .Values.env.IPFS_SWARM_KEY }}"
    command: ["sh","-c"]
    args:
      - >
        echo "Running entrypoint command";
        /usr/local/bin/start_ipfs;
        echo "Done";
  2-cors-headers:
    image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
    volumeMounts:
      - name: ipfs
        mountPath: "/ipfs"
      - name: ipns
        mountPath: "/ipns"
      - name: staging
        mountPath: "/export"
      - name: data
        mountPath: "/data/ipfs"
    env:
      - name: NODE_IP
        value: "{{ .Values.env.NODE_IP }}"
    command: ["sh", "-c"]
    args:
      - >
        echo "Setting API.HTTPHeaders.Access-Control-Allow-Methods to [\"PUT\", \"POST\"]...";
        ipfs config --json API.HTTPHeaders.Access-Control-Allow-Methods '["PUT", "POST"]';
        echo "Setting API.HTTPHeaders.Access-Control-Allow-Origin [\"http://${NODE_IP}:5001\",\"http://localhost:3000\", \"http://127.0.0.1:5001\"]...";
        ipfs config --json API.HTTPHeaders.Access-Control-Allow-Origin '["http://${NODE_IP}:5001","http://localhost:3000", "http://127.0.0.1:5001"]';
        echo "Done!";
        exit 0;
