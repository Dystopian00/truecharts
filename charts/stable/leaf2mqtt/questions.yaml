# Include{groups}
portals:
  web_portal:
    protocols:
      - "$kubernetes-resource_configmap_portal_protocol"
    host:
      - "$kubernetes-resource_configmap_portal_host"
    ports:
      - "$kubernetes-resource_configmap_portal_port"
questions:
  - variable: portal
    group: "Container Image"
    label: "Configure Portal Button"
    schema:
      type: dict
      hidden: true
      attrs:
        - variable: enabled
          label: "Enable"
          description: "enable the portal button"
          schema:
            hidden: true
            editable: false
            type: boolean
            default: true
# Include{global}
  - variable: controller
    group: "Controller"
    label: ""
    schema:
      type: dict
      attrs:
        - variable: type
          description: "Please specify type of workload to deploy"
          label: "(Advanced) Controller Type"
          schema:
            type: string
            default: "deployment"
            required: true
            enum:
              - value: "deployment"
                description: "Deployment"
              - value: "statefulset"
                description: "Statefulset"
              - value: "daemonset"
                description: "Daemonset"
        - variable: replicas
          description: "Number of desired pod replicas"
          label: "Desired Replicas"
          schema:
            type: int
            default: 1
            required: true
        - variable: strategy
          description: "Please specify type of workload to deploy"
          label: "(Advanced) Update Strategy"
          schema:
            type: string
            default: "RollingUpdate"
            required: true
            enum:
              - value: "Recreate"
                description: "Recreate: Kill existing pods before creating new ones"
              - value: "RollingUpdate"
                description: "RollingUpdate: Create new pods and then kill old ones"
              - value: "OnDelete"
                description: "(Legacy) OnDelete: ignore .spec.template changes"
# Include{controllerExpert}
  - variable: secret
    group: "Container Configuration"
    label: "Image Secrets"
    schema:
      type: dict
      attrs:
        - variable: LEAF_USERNAME
          label: "LEAF_USERNAME"
          description: "Your NissanConnect username"
          schema:
            type: string
            default: "leafuser"
            required: true
        - variable: LEAF_PASSWORD
          label: "LEAF_PASSWORD"
          description: "Your NissanConnect password"
          schema:
            type: string
            default: "changeme"
            required: true
        - variable: MQTT_USERNAME
          label: "MQTT_USERNAME"
          description: "Your MQTT username"
          schema:
            type: string
            default: "mqttuser"
            required: true
        - variable: MQTT_PASSWORD
          label: "MQTT_PASSWORD"
          description: "Your MQTT password"
          schema:
            type: string
            default: "changeme"
            required: true

  - variable: env
    group: "Container Configuration"
    label: "Image Environment"
    schema:
      type: dict
      attrs:
# Include{fixedEnv}

        - variable: LEAF_TYPE
          label: "LEAF_TYPE"
          schema:
            type: string
            default: ""
            required: true
        - variable: MQTT_HOST
          label: "MQTT_HOST"
          schema:
            type: string
            default: ""
            required: true
        - variable: MQTT_PORT
          label: "MQTT_PORT"
          schema:
            type: int
            default: 1883
        - variable: MQTT_BASE_TOPIC
          label: "MQTT_BASE_TOPIC"
          schema:
            type: string
            default: "leaf"
        - variable: UPDATE_INTERVAL_MINUTES
          label: "UPDATE_INTERVAL_MINUTES"
          schema:
            type: int
            default: 60
        - variable: CHARGING_UPDATE_INTERVAL_MINUTES
          label: "CHARGING_UPDATE_INTERVAL_MINUTES"
          schema:
            type: int
            default: 60
        - variable: LOG_LEVEL
          label: "LOG_LEVEL"
          schema:
            type: string
            default: "Warning"

# Include{containerConfig}


  - variable: serviceexpert
    group: "Networking and Services"
    label: "Show Expert Config"
    schema:
      type: boolean
      default: false
      show_subquestions_if: true
      subquestions:
        - variable: hostNetwork
          group: "Networking and Services"
          label: "Host-Networking (Complicated)"
          schema:
            type: boolean
            default: false

# Include{serviceExpert}

# Include{serviceList}

# Include{persistenceList}

# Include{ingressList}

  - variable: securityContext
    group: "Security and Permissions"
    label: "Security Context"
    schema:
      type: dict
      attrs:
        - variable: privileged
          label: "Privileged mode"
          schema:
            type: boolean
            default: false
        - variable: readOnlyRootFilesystem
          label: "ReadOnly Root Filesystem"
          schema:
            type: boolean
            default: false
        - variable: allowPrivilegeEscalation
          label: "Allow Privilege Escalation"
          schema:
            type: boolean
            default: false
        - variable: runAsNonRoot
          label: "runAsNonRoot"
          schema:
            type: boolean
            default: false

  - variable: podSecurityContext
    group: "Security and Permissions"
    label: "Pod Security Context"
    schema:
      type: dict
      attrs:
        - variable: runAsUser
          label: "runAsUser"
          description: "The UserID of the user running the application"
          schema:
            type: int
            default: 0
        - variable: runAsGroup
          label: "runAsGroup"
          description: The groupID this App of the user running the application"
          schema:
            type: int
            default: 0
        - variable: fsGroup
          label: "fsGroup"
          description: "The group that should own ALL storage."
          schema:
            type: int
            default: 568
        - variable: supplementalGroups
          label: "supplemental Groups"
          schema:
            type: list
            default: []
            items:
              - variable: supplementalGroupsEntry
                label: "supplemental Group"
                schema:
                  type: int
        - variable: fsGroupChangePolicy
          label: "When should we take ownership?"
          schema:
            type: string
            default: "OnRootMismatch"
            enum:
              - value: "OnRootMismatch"
                description: "OnRootMismatch"
              - value: "Always"
                description: "Always"

# Include{resources}

# Include{advanced}

# Include{addons}
