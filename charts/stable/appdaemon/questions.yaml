# Include{groups}
portals:
  open:
# Include{portalLink}
questions:
# Include{global}
# Include{controller}
# Include{controllerDeployment}
# Include{replicas}
# Include{replica1}
# Include{strategy}
# Include{recreate}
# Include{controllerExpert}
# Include{controllerExpertExtraArgs}
  - variable: secretEnv
    group: "Container Configuration"
    label: "Image Secrets"
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: TOKEN
          label: "HA Token"
          description: "Your HomeAssistant Token"
          schema:
            type: string
            private: true
            required: true
            default: "REPLACETHIS"
  # Docker specific env
  - variable: env
    group: "Container Configuration"
    label: "Image Environment"
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: HA_URL
          label: "HA URL"
          description: "Your HomeAssistant URL"
          schema:
            type: string
            default: ""
            required: true
        - variable: DASH_URL
          label: "Dashboard URL"
          description: "URL of your appdaemon dashboard"
          schema:
            type: string
            default: "http://$HOSTNAME:5050"
            required: true
        - variable: LATITUDE
          label: "Latitude"
          description: "Latitude of your home assistant instance"
          schema:
            type: string
            default: ""
            valid_chars: '^[0-9]{1,}\.{1}[0-9]{1,}$'
            required: true
        - variable: LONGITUDE
          label: "Longitude"
          description: "Longitude of your home assistant instance"
          schema:
            type: string
            default: ""
            valid_chars: '^[0-9]{1,}\.{1}[0-9]{1,}$'
            required: true
        - variable: ELEVATION
          label: "Elevation"
          description: "Longitude of your home assistant instance"
          schema:
            type: int
            default: 0
            required: true
# Include{containerConfig}
# Include{serviceRoot}
        - variable: main
          label: "Main Service"
          description: "The Primary service on which the healthcheck runs, often the webUI"
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{serviceSelectorSimple}
# Include{serviceSelectorExtras}
                    - variable: main
                      label: "Main Service Port Configuration"
                      schema:
                        additional_attrs: true
                        type: dict
                        attrs:
                          - variable: port
                            label: "Port"
                            description: "This port exposes the container port on the service"
                            schema:
                              type: int
                              default: 51050
                              required: true
# Include{advancedPortHTTP}
                                - variable: targetPort
                                  label: "Target Port"
                                  description: "The internal(!) port on the container the Application runs on"
                                  schema:
                                    type: int
                                    default: 5050
# Include{serviceExpertRoot}
            default: false
# Include{serviceExpert}
# Include{serviceList}
# Include{persistenceRoot}
        - variable: conf
          label: "App Config Storage"
          description: "Stores the Application Configuration."
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{persistenceBasic}
# Include{persistenceAdvanced}
# Include{persistenceList}
# Include{ingressList}
# Include{security}
# Include{securityContextAdvancedRoot}
              - variable: privileged
                label: "Privileged mode"
                schema:
                  type: boolean
                  default: false
              - variable: readOnlyRootFilesystem
                label: "ReadOnly Root Filesystem"
                schema:
                  type: boolean
                  default: true
              - variable: allowPrivilegeEscalation
                label: "Allow Privilege Escalation"
                schema:
                  type: boolean
                  default: false
              - variable: runAsNonRoot
                label: "runAsNonRoot"
                schema:
                  type: boolean
                  default: false
# Include{securityContextAdvanced}
# Include{podSecurityContextRoot}
        - variable: runAsUser
          label: "runAsUser"
          description: "The UserID of the user running the application"
          schema:
            type: int
            default: 0
        - variable: runAsGroup
          label: "runAsGroup"
          description: "The groupID this App of the user running the application"
          schema:
            type: int
            default: 0
        - variable: fsGroup
          label: "fsGroup"
          description: "The group that should own ALL storage."
          schema:
            type: int
            default: 568
# Include{podSecurityContextAdvanced}
# Include{resources}
# Include{advanced}
# Include{addons}
# Include{documentation}
