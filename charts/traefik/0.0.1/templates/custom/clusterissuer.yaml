apiVersion: v1
kind: Secret
metadata:
  name: dns-api-key-secret
  #namespace: cert-manager
type: Opaque
stringData:
  api-key: {{ .Values.certmanager.apikey }}
---
{{- if .Values.certmanager.email -}}
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  #namespace: default
  annotations:
   # hooks are defined here
   "helm.sh/hook": post-install,post-upgrade
   #"helm.sh/hook-weight": "0"
   "helm.sh/hook-delete-policy": before-hook-creation
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: {{ .Values.certmanager.email }}
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      # Secret resource used to store the account's private key.
      name: issuer-account-key
    # Add a single challenge solver, DNS01
    solvers:
    - dns01:
        cloudflare:
          email: {{ .Values.certmanager.email }}
          apiKeySecretRef:
            name: dns-api-key-secret
            key: api-key
---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
  #namespace: default
  annotations:
   # hooks are defined here
   "helm.sh/hook": post-install,post-upgrade
   #"helm.sh/hook-weight": "0"
   "helm.sh/hook-delete-policy": before-hook-creation
spec:
  acme:
    # You must replace this email address with your own.
    # Let's Encrypt will use this to contact you about expiring
    # certificates, and issues related to your account.
    email: {{ .Values.certmanager.email }}
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      # Secret resource used to store the account's private key.
      name: issuer-account-key
    # Add a single challenge solver, DNS01
    solvers:
    - dns01:
        {{- if eq .Values.certmanager.provider "cloudflare" -}}
        cloudflare:
          email: {{ .Values.certmanager.email }}
          apiKeySecretRef:
            name: dns-api-key-secret
            key: api-key
        {{- else if eq .Values.certmanager.provider "cloudDNS" -}}
        cloudDNS:
        # The ID of the GCP project
          project: $PROJECT_ID
          # This is the secret used to access the service account
          serviceAccountSecretRef:
            name: clouddns-dns01-solver-svc-acct
            key: key.json
        {{- else if eq .Values.certmanager.provider "route53" -}}
        route53:
          region: eu-central-1
          accessKeyID: AKIAIOSFODNN7EXAMPLE
          secretAccessKeySecretRef:
            name: prod-route53-credentials-secret
            key: secret-access-key
          # you can also assume a role with these credentials
          role: arn:aws:iam::YYYYYYYYYYYY:role/dns-manager
        {{- else if eq .Values.certmanager.provider "digitalocean" -}}
        digitalocean:
          tokenSecretRef:
            name: digitalocean-dns
            key: access-token 
        {{- else if eq .Values.certmanager.provider "rfc2136" -}}
        rfc2136:
         nameserver: 1.2.3.4:53
         tsigKeyName: example-com-secret
         tsigAlgorithm: HMACSHA512
         tsigSecretSecretRef:
           name: tsig-secret
           key: tsig-secret-key
        {{- else if eq .Values.certmanager.provider "azureDNS" -}}
        azureDNS:
          subscriptionID: AZURE_SUBSCRIPTION_ID
          resourceGroupName: AZURE_DNS_ZONE_RESOURCE_GROUP
          hostedZoneName: AZURE_DNS_ZONE
          # Azure Cloud Environment, default to AzurePublicCloud
          environment: AzurePublicCloud
        {{- else if eq .Values.certmanager.provider "akamai" -}}
        akamai:
          serviceConsumerDomain: akab-tho6xie2aiteip8p-poith5aej0ughaba.luna.akamaiapis.net
          clientTokenSecretRef:
            name: akamai-dns
            key: clientToken
          clientSecretSecretRef:
            name: akamai-dns
            key: clientSecret
          accessTokenSecretRef:
            name: akamai-dns
            key: accessToken
        {{- else if eq .Values.certmanager.provider "acmeDNS" -}}
        acmeDNS:
          host: https://acme.example.com
          accountSecretRef:
            name: acme-dns
            key: acmedns.json
        {{- end }}
{{- end }}
