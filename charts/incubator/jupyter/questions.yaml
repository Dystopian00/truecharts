# Include{groups}
portals:
  open:
# Include{portalLink}
questions:
# Include{global}
  - variable: imageSelector
    group: Container Image
    label: Select Image
    schema:
      type: string
      default: image
      enum:
        - value: image
          description: Base Notebook
        - value: imageMinimal
          description: Minimal Notebook
        - value: imageR
          description: R Notebook
        - value: imageScipy
          description: Scipy Notebook
        - value: imageTensorflow
          description: Tensorflow Notebook
        - value: imageDataScience
          description: Data Science Notebook
        - value: imagePySpark
          description: Pyspark Notebook
        - value: imageAllSpark
          description: All Spark Notebook
# Include{controller}
# Include{controllerDeployment}
# Include{replicas}
# Include{replica1}
# Include{strategy}
# Include{recreate}
# Include{controllerExpert}
# Include{controllerExpertExtraArgs}
  - variable: jupyter
    group: Container Configuration
    label: Jupyter Configuration
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: jupyter_cmd
          label: Jupyter Start Command
          description: Choose the start up command for Jupyter
          schema:
            type: string
            default: lab
            enum:
            - value: lab
              description: Lab
            - value: notebook
              description: Notebook
            - value: nbclassic
              description: Notebook Classic
            - value: server
              description: Server
        - variable: restartable
          label: Restartable
          description: Choose whether restarting Jupyter will kill the container or not
          schema:
            type: string
            default: yes
        - variable: chown_home
          label: chown Home
          description: chown the home directory based on the values of PUID and fsGroup
          schema:
            type: string
            default: yes
# Include{containerConfig}
# Include{serviceRoot}
        - variable: main
          label: Main Service
          description: The Primary service on which the healthcheck runs, often the webUI
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{serviceSelectorSimple}
# Include{serviceSelectorExtras}
                    - variable: main
                      label: Main Service Port Configuration
                      schema:
                        additional_attrs: true
                        type: dict
                        attrs:
                          - variable: port
                            label: Port
                            description: This port exposes the container port on the service
                            schema:
                              type: int
                              default: 10300
                              required: true
# Include{advancedPortTCP}
                                - variable: targetPort
                                  label: Target Port
                                  description: The internal(!) port on the container the Application runs on
                                  schema:
                                    type: int
                                    default: 8888
# Include{serviceExpertRoot}
            default: false
# Include{serviceExpert}
# Include{serviceList}
# Include{persistenceRoot}
        - variable: data
          label: data Storage
          description: Container Data Path
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{persistenceBasic}
# Include{persistenceAdvanced}
# Include{persistenceList}
# Include{ingressRoot}
        - variable: main
          label: Main Ingress
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{ingressDefault}
# Include{ingressTLS}
# Include{ingressTraefik}
# Include{ingressExpert}
# Include{ingressList}
# Include{security}
# Include{securityContextAdvancedRoot}
              - variable: privileged
                label: Privileged mode
                schema:
                  type: boolean
                  default: false
              - variable: readOnlyRootFilesystem
                label: ReadOnly Root Filesystem
                schema:
                  type: boolean
                  default: false
              - variable: allowPrivilegeEscalation
                label: Allow Privilege Escalation
                schema:
                  type: boolean
                  default: false
              - variable: runAsNonRoot
                label: runAsNonRoot
                schema:
                  type: boolean
                  default: false
# Include{securityContextAdvanced}
# Include{podSecurityContextRoot}
        - variable: runAsUser
          label: runAsUser
          description: The UserID of the user running the application
          schema:
            type: int
            default: 0
        - variable: runAsGroup
          label: runAsGroup
          description: The groupID this App of the user running the application
          schema:
            type: int
            default: 0
        - variable: fsGroup
          label: fsGroup
          description: The group that should own ALL storage.
          schema:
            type: int
            default: 568
# Include{podSecurityContextAdvanced}
# Include{resources}
# Include{advanced}
# Include{addons}
# Include{documentation}
