image:
  repository: docspell/restserver
  tag: v0.31.0@sha256:4faf2b35598e9e7e1f9add59130ca9cf43ccbca675011b2ff5f772ae55e19b21
  pullPolicy: IfNotPresent

joexImage:
  repository: docspell/joex
  tag: v0.31.0@sha256:05ad93fc95e9178d3ecd270438d41a237060a4d8546815c6488c687c9b854671

solrImage:
  repository: solr
  tag: 8.11.1@sha256:4f7445630b788708b070ec3a18d21d4a2cb40d79c373ede76720633e936e9d41

securityContext:
  readOnlyRootFilesystem: false
  runAsNonRoot: false

podSecurityContext:
  runAsUser: 0
  runAsGroup: 0

envFrom:
  - configMapRef:
      name: "docspell-restserver-env"

envValueFrom:
  DOCSPELL_SERVER_BACKEND_JDBC_PASSWORD:
    secretKeyRef:
      name: dbcreds
      key: postgresql-password
  DOCSPELL_SERVER_BACKEND_JDBC_URL:
    secretKeyRef:
      name: dbcreds
      key: jdbc
rest:
  app:
    # App ID should be unique on each node
    id: 'restserver-{{ randAlphaNum 10 }}'
    # App name to show on the top right corner
    name: "Docspell on Helm"
    # Chunk size used to store files in db and in ram while up/down
    chunk_size: 524288
    # This url is the base url for reaching this server internally.
    internal_url: 'http://{{ include "common.names.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.main.ports.main.port }}'
    # Base URL eg https://doc.mydomain.com TODO: Set this automatically?
    base_url: 'http://{{ include "common.names.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.main.ports.main.port }}'
    # Hard limit to search returns
    max_page_size: 200
    # Hard limit for char length on search
    max_char_length: 180
    # Show classification form
    classification_enabled: true
    bind_address: "0.0.0.0"
    bind_port: "{{ .Values.service.main.ports.main.port }}"
  mail:
    # Enable debugging for mail
    debug_enabled: false
  solr:
    # Enable full text search
    enabled: true
    # Tell solr when to commit the data
    commit_within: 1000
    # SOLR parser
    parser: "lucene"
    # Enable SOLR debbuging
    debug_enabled: false
    # Default combiner for tokens ["OR","AND"]
    combiner: "OR"
    # SOLR URL
    url: 'http://{{ include "common.names.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.solr.ports.solr.port }}/solr/docspell'
  auth:
    # Enable "Remember Cookie/Token
    remember_me_enabled: true
    # Cookie/Token Valid for
    remember_me_valid: "30 days"
    # Authetication token valid for
    session_valid: "5 minutes"
    # If empty a random will be generated, this is to sign authenticator tokens # TODO: We should generate one and store it to secrets
    server_secret: ""
    # If empty, endpoint is disabled
    admin_endpoint_secret: ""
  singup:
    # ["open", "invite", "closed"]
    mode: "open"
    # When mode ="invite", invite is valid for
    invite_time: "3 days"
    # When mode = "invite", this password will be used to generate inv keys
    invite_password: "new-invite-generator-password"
  integration:
    # Enable the integration endpoint
    enabled: false
    # The name used for the item source property
    priority: "low"
    # The priority to use when uploading to this endpoint
    source_name: "integration"
    # Enable the allowed IPs, for the integration endpoint TODO: (No env to set the ips?!)
    allowed_ips_enabled: false
    # Enable HTTP Basic for  integrtion endpoint
    http_basic_enabled: false
    # User for http basic for integration endpoint
    http_basic_user: "basic-user"
    # Password for http basic for integration endpoint
    http_basic_password: "basic-password"
    # Realm for http basic for integration endpoint
    http_basic_realm: "Docspell Integration Realm"
    # Enable HTTP Header for integration endpoint
    http_header_enabled: false
    # HTTP Header name for integration endpoint
    http_header_name: "docspell-integration-header"
    # Header secret for the integration endpoint
    http_header_value: "http-header-secret"

joex:
  app:
    id: 'joex-{{ randAlphaNum 10 }}'
    # TODO: Figure out the dns genertaion for additional containers
    chunk_size: 524288
    base_url: 'http://{{ include "common.names.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.joex.ports.joex.targetPort }}'
    bind_address: "0.0.0.0"
    bind_port: "{{ .Values.service.joex.ports.joex.targetPort }}"
  solr:
    enabled: true
    url: 'http://{{ include "common.names.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.solr.ports.solr.port }}/solr/docspell'
    commit_within: 1000
    parser: "lucene"
    combiner: "OR"
    index_chunk: 10
    logs_verbose: false
  convert:
    chunk_size: 524288
    converted_filename_part: "converted"
    decrypt_pdf_enabled: true
    md_internal_css: '\n        body { padding: 2em 5em; }\n      '
    max_image_size: 14000000
    ocrmypdf_enabled: true
    ocrmypdf_cmd_program: "ocrmypdf"
    ocrmypdf_cmd_timeout: "5 minutes"
    ocrmypdf_workdir: "/tmp/docspell-convert"
    tesseract_cmd_program: "tesseract"
    tesseract_cmd_timeout: "5 minutes"
    tesseract_workdir: "/tmp/docspell-convert"
    unoconv_cmd_program: "unoconv"
    unoconv_cmd_timeout: "2 minutes"
    unoconv_workdir: "/tmp/docspell-convert"
    wkhtmlpdf_cmd_program: "wkhtlmtopdf"
    wkhtmlpdf_cmd_timeout: "2 minutes"
    whhtmlpdf_workdir: "/tmp/docspell-convert"

env:
  TZ: "UTC"

service:
  main:
    ports:
      main:
        port: 7880
        targetPort: 7880
  solr:
    ports:
      solr:
        port: 8983
        # Set this based on `additionalContainers.solr.ports[0].containerPort`
        targetPort: 8983
  joex:
    ports:
      joex:
        port: 7878
        # Set this based on `additionalContainers.joex.ports[0].containerPort`
        targetPort: 7878

additionalContainers:
  solr:
    name: solr
    image: "{{ .Values.solrImage.repository }}:{{ .Values.solrImage.tag }}"
    securityContext:
      runAsUser: 568
      runAsNonRoot: true
    ports:
      - containerPort: 8983
        name: main
    command:
      - solr-precreate
      - docspell
    volumeMounts:
    - name: solr
      mountPath: "/var/solr"
    livenessProbe:
      exec:
      # TODO: Figure out the dns genertaion for additional containers
        command: ["curl", "-f", 'http://{{ include "common.names.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.solr.ports.solr.port }}/solr/docspell/admin/ping']
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 5
    readinessProbe:
      exec:
      # TODO: Figure out the dns genertaion for additional containers
        command: ["curl", "-f", 'http://{{ include "common.names.fullname" . }}.{{ .Release.Namespace }}.svc.cluster.local:{{ .Values.service.solr.ports.solr.port }}/solr/docspell/admin/ping']
      initialDelaySeconds: 10
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 5
  joex:
    name: joex
    image: "{{ .Values.joexImage.repository }}:{{ .Values.joexImage.tag }}"
    securityContext:
      runAsUser: 0
      runAsNonRoot: false
    ports:
      - containerPort: 7878
        name: main
    envFrom:
      - configMapRef:
          name: "docspell-joex-env"
    env:
      - name: TZ
        value: "{{ .Values.env.TZ }}"
      - name: DOCSPELL_JOEX_JDBC_URL
        valueFrom:
          secretKeyRef:
            name: dbcreds
            key: jdbc
      - name: DOCSPELL_JOEX_JDBC_PASSWORD
        valueFrom:
          secretKeyRef:
            name: dbcreds
            key: postgresql-password

persistence:
  solr:
    enabled: true
    mountPath: "/var/solr"

# Enabled postgres
postgresql:
  enabled: true
  existingSecret: "dbcreds"
  postgresqlUsername: docspell
  postgresqlDatabase: docspell
