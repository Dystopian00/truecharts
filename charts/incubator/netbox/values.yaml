image:
  repository: tccr.io/truecharts/netbox
  tag: 3.3.6@sha256:4084b61c588dd2f15d117f30017a5c15fd03c3de38ed49e3241c48bce54048d7
  pullPolicy: IfNotPresent

securityContext:
  readOnlyRootFilesystem: false
  runAsNonRoot: false

podSecurityContext:
  runAsUser: 0
  runAsGroup: 0

service:
  main:
    ports:
      main:
        port: 10265
        targetPort: 8080

netbox:
  # - This is a list of valid fully-qualified domain names (FQDNs) for the NetBox server. NetBox will not permit write
  # - access to the server via any other hostnames. The first FQDN in the list will be treated as the preferred name.
  allowed_hosts:
    - "127.0.0.1"
  # - Specify one or more name and email address tuples representing NetBox administrators. These people will be notified of
  # - application errors (assuming correct email settings are provided).
  admins: []
    # - name: John Doe
    #   email: jdoe@example.com
  # - Enable any desired validators for local account passwords below. For a list of included validators, please see the
  # - Django documentation at https://docs.djangoproject.com/en/stable/topics/auth/passwords/#password-validation.
  auth_password_validators: []
    # - name: django.contrib.auth.password_validation.MinimumLengthValidator
    #   options:
    #     - key: min_length
    #       value: 10
  # - API Cross-Origin Resource Sharing (CORS) settings. If CORS_ORIGIN_ALLOW_ALL is set to True, all origins will be
  # - allowed. Otherwise, define a list of allowed origins using either CORS_ORIGIN_WHITELIST or
  # - CORS_ORIGIN_REGEX_WHITELIST. For more information, see https://github.com/ottoyiu/django-cors-headers
  cors_origin_allow_all: false
  cors_origin_whitelist: []
    # - "127.0.0.1"
  cors_origin_regex_whitelist: []
    # - r'^(https?://)?(\w+\.)?example\.com$'
  debug: false
  email:
    server: ""
    port: 587
    username: ""
    password: ""
    use_ssl: false
    use_tls: true
    timeout: 10
    from_email: ""
  # - Exempt certain models from the enforcement of view permissions. Models listed here will be viewable by all users and
  # - by anonymous users. List models in the form `<app>.<model>`. Add '*' to this list to exempt all models.
  exempt_view_permissions: []
    # - dcim.site
    # - dcim.region
    # - ipam.prefix
  # - HTTP proxies NetBox should use when sending outbound HTTP requests (e.g. for webhooks).
  http_proxies: {}
    # http: http://10.10.1.10:3128
    # https: http://10.10.1.10:1080
  # - IP addresses recognized as internal to the system. The debugging toolbar will be available only to clients accessing
  # - NetBox from an internal IP.
  internal_ips:
    - "127.0.0.1"
    - ::1
  # - Enable custom logging. Please see the Django documentation for detailed guidance on configuring custom logs:
  # - https://docs.djangoproject.com/en/stable/topics/logging/
  # TODO:
  logging: {}
  # - Automatically reset the lifetime of a valid session upon each authenticated request. Enables users to remain
  # - authenticated to NetBox indefinitely.
  login_persistence: false
  # - Setting this to True will permit only authenticated users to access any part of NetBox. By default, anonymous users
  # - are permitted to access most data in NetBox but not make any changes.
  login_required: true
  # - The length of time (in seconds) for which a user will remain logged into the web UI before being prompted to
  # - re-authenticate. (Default: 1209600 [14 days])
  login_timeout: 1209600
  # - Expose Prometheus monitoring metrics at the HTTP endpoint '/metrics'
  metrics: false

persistence:
  config:
    enabled: true
    mountPath: /etc/netbox/config
  reports:
    enabled: true
    mountPath: /etc/netbox/reports
  scripts:
    enabled: true
    mountPath: /etc/netbox/scripts
  media:
    enabled: true
    mountPath: /opt/netbox/netbox/media
  configfile:
    enabled: true
    type: secret
    readOnly: true
    defaultMode: "0600"
    objectName: '{{ include "tc.common.names.fullname" . }}-secret'
    mountPath: /etc/netbox/config/config.py
    subPath: config.py

postgresql:
  enabled: true
  existingSecret: dbcreds
  postgresqlUsername: authentik
  postgresqlDatabase: authentik

redis:
  enabled: true
  existingSecret: rediscreds

portal:
  enabled: true
