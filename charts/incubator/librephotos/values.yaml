image:
  repository: tccr.io/truecharts/librephotos-backend
  tag: latest@sha256:218a24a65ecb677a5a7e0e00e650b861f91552533985f7d0912755cf4533a62c
  pullPolicy: IfNotPresent
frontendImage:
  repository: tccr.io/truecharts/librephotos-frontend
  tag: latest@sha256:f936b77fea81b9f291cff372ff324c930a91eeae7d5ffe5a2129efcc52f83b1f
proxyImage:
  repository: tccr.io/truecharts/librephotos-proxy
  tag: latest@sha256:ed89392b8821b52826e83b3df76ab72b342631e640629d087eb173b249d5dcf5

securityContext:
  container:
    readOnlyRootFilesystem: false
    runAsNonRoot: false
    runAsUser: 0
    runAsGroup: 0

service:
  main:
    ports:
      main:
        targetPort: 80
        port: 10161

librephotos:
  admin:
    email: "admin@mydomain.com"
    user: "admin"
    password: "password"
  backend:
    web_concurrency: 2
    heavyweight_process: 1
    skip_patterns: ""
    debug: false
  mapbox:
    api_key: ""

workload:
  main:
    podSpec:
      containers:
        main:
          probes:
            liveness:
              path: "/login"
            readiness:
              path: "/login"
            startup:
              path: "/login"
          env:
            BACKEND: '{{ printf "http://%v" (include "tc.v1.common.lib.chart.names.fullname" $) }}'
            WEB_CONCURRENCY: "{{ .Values.librephotos.backend.web_concurrency }}"
            SKIP_PATTERNS: '{{ join "," .Values.librephotos.backend.skip_patterns }}'
            HEAVYWEIGHT_PROCESS: "{{ .Values.librephotos.backend.heavyweight_process }}"
            DEBUG: "{{ .Values.librephotos.backend.debug }}"
            SECRET_KEY:
              secretKeyRef:
                name: librephotos-secrets
                key: SECRET_KEY
            DB_BACKEND: "postgresql"
            DB_NAME: "{{ .Values.cnpg.main.database }}"
            DB_USER: "{{ .Values.cnpg.main.user }}"
            DB_PORT: "5432"
            DB_PASS:
              secretKeyRef:
                name: cnpg-main-user
                key: password
            DB_HOST:
              secretKeyRef:
                name: cnpg-main-urls
                key: host
            REDIS_PORT: "6379"
            REDIS_HOST:
              secretKeyRef:
                expandObjectName: false
                name: '{{ printf "%s-%s" .Release.Name "rediscreds" }}'
                key: plainhost
            REDIS_PASS:
              secretKeyRef:
                expandObjectName: false
                name: '{{ printf "%s-%s" .Release.Name "rediscreds" }}'
                key: redis-password
  proxy:
    enabled: true
    type: Deployment
    podSpec:
      containers:
        proxy:
          primary: true
          enabled: true
          imageSelector: proxyImage
          probes:
            liveness:
              enabled: true
              type: http
              path: /login
              port: "{{ .Values.service.main.ports.main.targetPort }}"
            readiness:
              enabled: true
              type: http
              path: /login
              port: "{{ .Values.service.main.ports.main.targetPort }}"
            startup:
              enabled: true
              type: http
              path: /login
              port: "{{ .Values.service.main.ports.main.targetPort }}"
  frontend:
    enabled: true
    type: Deployment
    podSpec:
      containers:
        frontend:
          primary: true
          enabled: true
          imageSelector: frontendImage
          probes:
            liveness:
              enabled: true
              type: http
              path: /login
              port: "{{ .Values.service.main.ports.main.targetPort }}"
            readiness:
              enabled: true
              type: http
              path: /login
              port: "{{ .Values.service.main.ports.main.targetPort }}"
            startup:
              enabled: true
              type: http
              path: /login
              port: "{{ .Values.service.main.ports.main.targetPort }}"

persistence:
  media:
    enabled: true
    targetSelector:
      main:
        main:
          mountPath: "/data"
      proxy:
        proxy:
          mountPath: "/data"
  protected-media:
    enabled: true
    targetSelector:
      main:
        main:
          mountPath: "/protected_media"
      proxy:
        proxy:
          mountPath: "/protected_media"
  logs:
    enabled: true
    mountPath: "/logs"
  cache:
    enabled: true
    type: emptyDir
    mountPath: "/root/.cache"
  nginx-config:
    enabled: true
    type: configmap
    objectName: nginx-config
    targetSelector:
      proxy:
        proxy:
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true

redis:
  enabled: true

cnpg:
  main:
    enabled: true
    user: librephotos
    database: librephotos

portal:
  open:
    enabled: true
