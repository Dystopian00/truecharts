NAME: misskey
LAST DEPLOYED: Thu Nov  3 23:35:58 2022
new-namespace1238273848: default
STATUS: pending-install
REVISION: 1
TEST SUITE: None
HOOKS:
MANIFEST:
---
# Source: misskey/charts/postgresql/templates/common.yaml
apiVersion: v1
kind: Secret
metadata:
  name: misskey-postgresql-credentials
  labels:
    app.kubernetes.io/instance: misskey
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 14.5.0
    helm-revision: "1"
    helm.sh/chart: postgresql-8.0.114
stringData:
  postgresql-password: 'testpass'
  postgresql-postgres-password: 'testroot'
---
# Source: misskey/charts/redis/templates/common.yaml
apiVersion: v1
kind: Secret
metadata:
  name: misskey-redis-credentials
  labels:
    app.kubernetes.io/instance: misskey
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.5
    helm-revision: "1"
    helm.sh/chart: redis-3.0.111
stringData:
  redis-password: 'testpass'
---
# Source: misskey/templates/common.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    helm.sh/chart: misskey-0.0.0
    app.kubernetes.io/name: misskey
    app.kubernetes.io/instance: misskey
    helm-revision: "1"
    app.kubernetes.io/version: "12.119.0"
    app.kubernetes.io/managed-by: Helm
  name: dbcreds
data:
  postgresql-password: "YldSamM3eExMYklPcWZiYXVGdWZlUEVhV2VjelpuWXhpVnZBdEY4QlFEcXl2NFFOZ0w="
  postgresql-postgres-password: "S3BhdU9NTHRGUGt3NGU0TmN6aWhzblBKcUFvNjhhNWpHSFdncFoyQ3RrTTNQT1N4WWs="
  url: "cG9zdGdyZXNxbDovL21pc3NrZXk6YldSamM3eExMYklPcWZiYXVGdWZlUEVhV2VjelpuWXhpVnZBdEY4QlFEcXl2NFFOZ0xAbWlzc2tleS1wb3N0Z3Jlc3FsOjU0MzIvbWlzc2tleQ=="
  url-noql: "cG9zdGdyZXM6Ly9taXNza2V5OmJXUmpjN3hMTGJJT3FmYmF1RnVmZVBFYVdlY3pabll4aVZ2QXRGOEJRRHF5djRRTmdMQG1pc3NrZXktcG9zdGdyZXNxbDo1NDMyL21pc3NrZXk="
  urlnossl: "cG9zdGdyZXNxbDovL21pc3NrZXk6YldSamM3eExMYklPcWZiYXVGdWZlUEVhV2VjelpuWXhpVnZBdEY4QlFEcXl2NFFOZ0xAbWlzc2tleS1wb3N0Z3Jlc3FsOjU0MzIvbWlzc2tleT9zc2xtb2RlPWRpc2FibGU="
  plainporthost: "bWlzc2tleS1wb3N0Z3Jlc3Fs"
  plainhost: "bWlzc2tleS1wb3N0Z3Jlc3Fs"
  jdbc: "amRiYzpwb3N0Z3Jlc3FsOi8vbWlzc2tleS1wb3N0Z3Jlc3FsOjU0MzIvbWlzc2tleQ=="
type: Opaque
---
# Source: misskey/templates/common.yaml
apiVersion: v1
kind: Secret
metadata:
  labels:
    helm.sh/chart: misskey-0.0.0
    app.kubernetes.io/name: misskey
    app.kubernetes.io/instance: misskey
    helm-revision: "1"
    app.kubernetes.io/version: "12.119.0"
    app.kubernetes.io/managed-by: Helm
  name: rediscreds
data:
  redis-password: "SWNRbUlnNzkwR050cWZveDdYNVRpaFlDb3ZsaGl2ODdZdEtBR3ZSRzhuUURDTVZoSTg="
  url: "cmVkaXM6Ly88bmlsPjpJY1FtSWc3OTBHTnRxZm94N1g1VGloWUNvdmxoaXY4N1l0S0FHdlJHOG5RRENNVmhJOEBtaXNza2V5LXJlZGlzOjYzNzkvMA=="
  plainhostpass: "PG5pbD46SWNRbUlnNzkwR050cWZveDdYNVRpaFlDb3ZsaGl2ODdZdEtBR3ZSRzhuUURDTVZoSThAbWlzc2tleS1yZWRpcw=="
  plainporthost: "bWlzc2tleS1yZWRpczo2Mzc5"
  plainhost: "bWlzc2tleS1yZWRpcw=="
type: Opaque
---
# Source: misskey/charts/redis/templates/common.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: misskey-redis-health
  labels:
    app.kubernetes.io/instance: misskey
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.5
    helm-revision: "1"
    helm.sh/chart: redis-3.0.111
data:
  ping_liveness_local.sh: |-
    #!/bin/bash
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_liveness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_liveness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_liveness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_liveness_master.sh: |-
    #!/bin/bash
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ] && [ "$response" != "LOADING Redis is loading the dataset in memory" ]; then
      echo "$response"
      exit 1
    fi
  ping_readiness_local.sh: |-
    #!/bin/bash
    [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h localhost \
        -p $REDIS_PORT \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "failed to connect using password: $REDIS_PASSWORD response: $response"
      exit 1
    fi
  ping_readiness_local_and_master.sh: |-
    script_dir="$(dirname "$0")"
    exit_status=0
    "$script_dir/ping_readiness_local.sh" $1 || exit_status=$?
    "$script_dir/ping_readiness_master.sh" $1 || exit_status=$?
    exit $exit_status
  ping_readiness_master.sh: |-
    #!/bin/bash
    [[ -n "$REDIS_MASTER_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_MASTER_PASSWORD"
    response=$(
      timeout -s 3 $1 \
      redis-cli \
        -h $REDIS_MASTER_HOST \
        -p $REDIS_MASTER_PORT_NUMBER \
        ping
    )
    if [ "$response" != "PONG" ]; then
      echo "$response"
      exit 1
    fi
---
# Source: misskey/templates/ConfigMap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: misskeyconfig
data:
  default.yml: |-
    #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
    # Misskey configuration
    #━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    #   ┌─────┐
    #───┘ URL └─────────────────────────────────────────────────────

    # Final accessible URL seen by a user.
    # url: https://example.tld/

    # ONCE YOU HAVE STARTED THE INSTANCE, DO NOT CHANGE THE
    # URL SETTINGS AFTER THAT!

    #   ┌───────────────────────┐
    #───┘ Port and TLS settings └───────────────────────────────────

    #
    # Misskey supports two deployment options for public.
    #

    # Option 1: With Reverse Proxy
    #
    #                 +----- https://example.tld/ ------------+
    #   +------+      |+-------------+      +----------------+|
    #   | User | ---> || Proxy (443) | ---> | Misskey (3000) ||
    #   +------+      |+-------------+      +----------------+|
    #                 +---------------------------------------+
    #
    #   You need to setup reverse proxy. (eg. nginx)
    #   You do not define 'https' section.

    # Option 2: Standalone
    #
    #                 +- https://example.tld/ -+
    #   +------+      |   +---------------+    |
    #   | User | ---> |   | Misskey (443) |    |
    #   +------+      |   +---------------+    |
    #                 +------------------------+
    #
    #   You need to run Misskey as root.
    #   You need to set Certificate in 'https' section.

    # To use option 1, uncomment below line.
    port: 3000 # A port that your Misskey server should listen.

    # To use option 2, uncomment below lines.
    #port: 443

    #https:
    #  # path for certification
    #  key: /etc/letsencrypt/live/example.tld/privkey.pem
    #  cert: /etc/letsencrypt/live/example.tld/fullchain.pem

    #   ┌──────────────────────────┐
    #───┘ PostgreSQL configuration └────────────────────────────────

    db:
      host:
        secretKeyRef:
          name: dbcreds
          key: plainporthost
      port: 5432

      # Database name
      db: "misskey"

      # Auth
      user: "misskey"
      pass:
        secretKeyRef:
          name: dbcreds
          key: postgresql-password

      # Whether disable Caching queries
      #disableCache: true

      # Extra Connection options
      #extra:
      #  ssl: true

    #   ┌─────────────────────┐
    #───┘ Redis configuration └─────────────────────────────────────

    redis:
      host:
        secretKeyRef:
          name: rediscreds
          key: plainhost
      port: 6379
      pass:
        secretKeyRef:
          name: rediscreds
          key: redis-password
      #prefix: example-prefix
      #db: 1

    #   ┌─────────────────────────────┐
    #───┘ Elasticsearch configuration └─────────────────────────────

    #elasticsearch:
    #  host: localhost
    #  port: 9200
    #  ssl: false
    #  user:
    #  pass:

    #   ┌───────────────┐
    #───┘ ID generation └───────────────────────────────────────────

    # You can select the ID generation method.
    # You don't usually need to change this setting, but you can
    # change it according to your preferences.

    # Available methods:
    # aid ... Short, Millisecond accuracy
    # meid ... Similar to ObjectID, Millisecond accuracy
    # ulid ... Millisecond accuracy
    # objectid ... This is left for backward compatibility

    # ONCE YOU HAVE STARTED THE INSTANCE, DO NOT CHANGE THE
    # ID SETTINGS AFTER THAT!

    id: "aid"
    #   ┌─────────────────────┐
    #───┘ Other configuration └─────────────────────────────────────

    # Whether disable HSTS
    #disableHsts: true

    # Number of worker processes
    #clusterLimit: 1

    # Job concurrency per worker
    # deliverJobConcurrency: 128
    # inboxJobConcurrency: 16

    # Job rate limiter
    # deliverJobPerSec: 128
    # inboxJobPerSec: 16

    # Job attempts
    # deliverJobMaxAttempts: 12
    # inboxJobMaxAttempts: 8

    # IP address family used for outgoing request (ipv4, ipv6 or dual)
    #outgoingAddressFamily: ipv4

    # Syslog option
    #syslog:
    #  host: localhost
    #  port: 514

    # Proxy for HTTP/HTTPS
    #proxy: http://127.0.0.1:3128

    #proxyBypassHosts: [
    #  'example.com',
    #  '192.0.2.8'
    #]

    # Proxy for SMTP/SMTPS
    #proxySmtp: http://127.0.0.1:3128   # use HTTP/1.1 CONNECT
    #proxySmtp: socks4://127.0.0.1:1080 # use SOCKS4
    #proxySmtp: socks5://127.0.0.1:1080 # use SOCKS5

    # Media Proxy
    #mediaProxy: https://example.com/proxy

    # Sign to ActivityPub GET request (default: false)
    #signToActivityPubGet: true

    #allowedPrivateNetworks: [
    #  '127.0.0.1/32'
    #]

    # Upload or download file size limits (bytes)
    #maxFileSize: 262144000
    url: https://localhost:3000
---
# Source: misskey/templates/common.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: misskey-files
  labels:
    helm.sh/chart: misskey-0.0.0
    app.kubernetes.io/name: misskey
    app.kubernetes.io/instance: misskey
    helm-revision: "1"
    app.kubernetes.io/version: "12.119.0"
    app.kubernetes.io/managed-by: Helm
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "999Gi"
---
# Source: misskey/charts/postgresql/templates/common.yaml
apiVersion: v1
kind: Service
metadata:
  name: misskey-postgresql
  labels:
    app.kubernetes.io/instance: misskey
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 14.5.0
    helm-revision: "1"
    helm.sh/chart: postgresql-8.0.114
  annotations:
spec:
  type: ClusterIP
  ipFamilyPolicy: SingleStack
  
  ports:
  - port: 5432
    targetPort: 5432
    protocol: TCP
    name: main
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: misskey
---
# Source: misskey/charts/redis/templates/common.yaml
apiVersion: v1
kind: Service
metadata:
  name: misskey-redis
  labels:
    app.kubernetes.io/instance: misskey
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.5
    helm-revision: "1"
    helm.sh/chart: redis-3.0.111
  annotations:
spec:
  type: ClusterIP
  ipFamilyPolicy: SingleStack
  
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: main
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: misskey
---
# Source: misskey/templates/common.yaml
apiVersion: v1
kind: Service
metadata:
  name: misskey
  labels:
    app.kubernetes.io/instance: misskey
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: misskey
    app.kubernetes.io/version: 12.119.0
    helm-revision: "1"
    helm.sh/chart: misskey-0.0.0
  annotations:
spec:
  type: ClusterIP
  ipFamilyPolicy: SingleStack
  
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: main
  selector:
    app.kubernetes.io/name: misskey
    app.kubernetes.io/instance: misskey
---
# Source: misskey/templates/common.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: misskey
  labels:
    app.kubernetes.io/instance: misskey
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: misskey
    app.kubernetes.io/version: 12.119.0
    helm-revision: "1"
    helm.sh/chart: misskey-0.0.0
  annotations:
    rollme: U7aBm
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: misskey
      app.kubernetes.io/instance: misskey
  template:
    metadata:
      annotations:
        
      labels:
        app.kubernetes.io/name: misskey
        app.kubernetes.io/instance: misskey
    spec:
      
        
      serviceAccountName: default
      securityContext:
          
        fsGroup: 33
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsUser: 0
        supplementalGroups:
        - 568
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          
          - name: ndots
            value: "1"
      enableServiceLinks: false
      terminationGracePeriodSeconds: 10
      initContainers:
        
        - name: prepare
          image: tccr.io/truecharts/multi-init:1.1.0@sha256:4337af9c2b79b8d571e4ada3c76de55aff8302632cce91b52af860d4a6607742
          securityContext:
            runAsUser: 0
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
          env:
            - name: REDIS_HOST
              valueFrom:
                secretKeyRef:
                  name: rediscreds
                  key: plainhost
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rediscreds
                  key: redis-password
            - name: REDIS_PORT
              value: "6379"
          command:
            - "/bin/sh"
            - "-c"
            - |
              /bin/bash <<'EOF'
              echo "Automatically correcting permissions..."
              until
                pg_isready -U misskey -h misskey-postgresql
                do sleep 2
              done
              [[ -n "$REDIS_PASSWORD" ]] && export REDISCLI_AUTH="$REDIS_PASSWORD";
              export LIVE=false;
              until "$LIVE";
              do
                response=$(
                    timeout -s 3 2 \
                    redis-cli \
                      -h "$REDIS_HOST" \
                      -p "$REDIS_PORT" \
                      ping
                  )
                if [ "$response" == "PONG" ] || [ "$response" == "LOADING Redis is loading the dataset in memory" ]; then
                  LIVE=true
                  echo "$response"
                  echo "Redis Responded, ending initcontainer and starting main container(s)..."
                else
                  echo "$response"
                  echo "Redis not responding... Sleeping for 10 sec..."
                  sleep 10
                fi;
              done
        
              EOF
        
          volumeMounts:
        - command:
          - /bin/sh
          - -c
          - |
            /bin/bash <<'EOF'
            echo "Forcing permissions on userdata folder..."
            if nfs4xdr_getfacl && nfs4xdr_getfacl | grep -qv "Failed to get NFSv4 ACL"; then
              echo "NFSv4 ACLs detected, Trying to override permissions using nfs4_setfacl..."
              nfs4_setfacl -R -a A:g:33:RWX "/misskey/files"
            else
              echo "No NFSv4 ACLs detected, trying to override permissions using chown/chmod..."
              echo "checking ownership..."
              if [ $(stat -c %g .) -eq 33 ]; then
                echo "Ownership already set to 33, skipping..."
              else
                echo "Changing ownership to group 33..."
                chown -R :33 "/misskey/files"
              fi
              chmod 770 /misskey/files
            fi
            EOF
          image: 'misskey/misskey:latest'
          name: prestart
          securityContext:
            privileged: true
            runAsGroup: 0
            runAsUser: 0
          volumeMounts:
          - mountPath: /misskey/files
            name: files
          - mountPath: /misskey/.config
            name: misskeyconfig
            readOnly: true
      containers:
        - name: misskey
          image: misskey/misskey:latest
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add: []
              drop: []
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: false
        
          env:
            - name: PUID
              value: "568"
            - name: USER_ID
              value: "568"
            - name: UID
              value: "568"
            - name: UMASK
              value: "2"
            - name: UMASK_SET
              value: "2"
            - name: PGID
              value: "33"
            - name: GROUP_ID
              value: "33"
            - name: GID
              value: "33"
            - name: NVIDIA_VISIBLE_DEVICES
              value: "void"
            - name: TZ
              value: "UTC"
            - name: "AccessIP"
              value: 
            - name: "NODE_ENV"
              value: "production"
            - name: "POSTGRES_DB"
              value: "misskey"
            - name: "POSTGRES_HOST"
              valueFrom:
                secretKeyRef:
                  key: plainporthost
                  name: dbcreds
            - name: "POSTGRES_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: postgresql-password
                  name: dbcreds
            - name: "POSTGRES_USER"
              value: "misskey"
            - name: "REDIS_HOST"
              valueFrom:
                secretKeyRef:
                  key: plainhost
                  name: rediscreds
            - name: "REDIS_HOST_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: redis-password
                  name: rediscreds
          envFrom:
          ports:
            - name: main
              containerPort: 3000
              protocol: TCP
          volumeMounts:
            
            - mountPath: /misskey/files
              name: files
            - mountPath: /misskey/.config
              name: misskeyconfig
              readOnly: true
            - mountPath: /shared
              name: shared
            - mountPath: /dev/shm
              name: shm
            - mountPath: /tmp
              name: temp
            - mountPath: /var/logs
              name: varlogs
            - mountPath: /var/run
              name: varrun
          livenessProbe:
            tcpSocket:
              port: 3000
            initialDelaySeconds: 10
            failureThreshold: 5
            timeoutSeconds: 5
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 3000
            initialDelaySeconds: 10
            failureThreshold: 5
            timeoutSeconds: 5
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 3000
            initialDelaySeconds: 10
            failureThreshold: 60
            timeoutSeconds: 2
            periodSeconds: 5
          
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
      volumes:
        - name: files
          persistentVolumeClaim:
            claimName: misskey-files
        - name: misskeyconfig
          configMap:
            name: misskeyconfig
        - name: shared
          emptyDir:
            {}
        - name: shm
          emptyDir:
            medium: Memory
        - name: temp
          emptyDir:
            {}
        - name: varlogs
          emptyDir:
            {}
        - name: varrun
          emptyDir:
            medium: Memory
      hostAliases:
          
        - hostnames:
          - 'placeholder.fakedomain.dns'
          ip: '127.0.0.1'
---
# Source: misskey/charts/postgresql/templates/common.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: misskey-postgresql
  labels:
    app.kubernetes.io/instance: misskey
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/version: 14.5.0
    helm-revision: "1"
    helm.sh/chart: postgresql-8.0.114
  annotations:
    rollme: cR1QH
spec:
  revisionHistoryLimit: 3
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: misskey
  serviceName: misskey-postgresql
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/instance: misskey
    spec:
      
        
      serviceAccountName: default
      securityContext:
          
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsUser: 568
        supplementalGroups:
        - 568
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          
          - name: ndots
            value: "1"
      enableServiceLinks: false
      terminationGracePeriodSeconds: 10
      initContainers:
        
        - name: prepare
          image: tccr.io/truecharts/multi-init:1.1.0@sha256:4337af9c2b79b8d571e4ada3c76de55aff8302632cce91b52af860d4a6607742
          securityContext:
            runAsUser: 0
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
          env:
          command:
            - "/bin/sh"
            - "-c"
            - |
              /bin/bash <<'EOF'
              echo "Automatically correcting permissions..."
        
              EOF
        
          volumeMounts:
      containers:
        - name: misskey-postgresql
          image: tccr.io/truecharts/postgresql:14.5.0@sha256:1d5c95be8ddb4182509773cfc4d75101adcbd1ae97a47011cd52123dff59c691
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add: []
              drop: []
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
        
          env:
            - name: UMASK
              value: "2"
            - name: UMASK_SET
              value: "2"
            - name: S6_READ_ONLY_ROOT
              value: "1"
            - name: NVIDIA_VISIBLE_DEVICES
              value: "void"
            - name: TZ
              value: "UTC"
            - name: "POSTGRESQL_POSTGRES_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: postgresql-postgres-password
                  name: 'dbcreds'
            - name: "POSTGRES_DB"
              value: "misskey"
            - name: "POSTGRES_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: postgresql-password
                  name: 'dbcreds'
            - name: "POSTGRES_USER"
              value: "misskey"
          envFrom:
          ports:
            - name: main
              containerPort: 5432
              protocol: TCP
          volumeMounts:
            
            - mountPath: /shared
              name: shared
            - mountPath: /dev/shm
              name: shm
            - mountPath: /tmp
              name: temp
            - mountPath: /var/logs
              name: varlogs
            - mountPath: /bitnami/postgresql
              name: db
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - until pg_isready -U ${POSTGRES_USER} -h localhost; do sleep 2 ; done
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - until pg_isready -U ${POSTGRES_USER} -h localhost; do sleep 2 ; done
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          startupProbe:
            exec:
              command:
              - sh
              - -c
              - until pg_isready -U ${POSTGRES_USER} -h localhost; do sleep 2 ; done
            failureThreshold: 60
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 2
          
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
      volumes:
        - name: shared
          emptyDir:
            {}
        - name: shm
          emptyDir:
            medium: Memory
        - name: temp
          emptyDir:
            {}
        - name: varlogs
          emptyDir:
            {}
  volumeClaimTemplates:
    - metadata:
        name: db
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "999Gi"
---
# Source: misskey/charts/redis/templates/common.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: misskey-redis
  labels:
    app.kubernetes.io/instance: misskey
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: redis
    app.kubernetes.io/version: 7.0.5
    helm-revision: "1"
    helm.sh/chart: redis-3.0.111
  annotations:
    rollme: EZZXf
spec:
  revisionHistoryLimit: 3
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: misskey
  serviceName: misskey-redis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/instance: misskey
    spec:
      
        
      serviceAccountName: default
      securityContext:
          
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        runAsGroup: 0
        runAsUser: 568
        supplementalGroups:
        - 568
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          
          - name: ndots
            value: "1"
      enableServiceLinks: false
      terminationGracePeriodSeconds: 10
      initContainers:
        
        - name: prepare
          image: tccr.io/truecharts/multi-init:1.1.0@sha256:4337af9c2b79b8d571e4ada3c76de55aff8302632cce91b52af860d4a6607742
          securityContext:
            runAsUser: 0
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
          env:
          command:
            - "/bin/sh"
            - "-c"
            - |
              /bin/bash <<'EOF'
              echo "Automatically correcting permissions..."
        
              EOF
        
          volumeMounts:
      containers:
        - name: misskey-redis
          image: tccr.io/truecharts/redis:7.0.5@sha256:076b13830a0004cb5bc140ea1a815ba4910a84e4f011a6b5b3f3720c5022d3d2
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              add: []
              drop: []
            privileged: false
            readOnlyRootFilesystem: false
            runAsNonRoot: true
        
          env:
            - name: UMASK
              value: "2"
            - name: UMASK_SET
              value: "2"
            - name: S6_READ_ONLY_ROOT
              value: "1"
            - name: NVIDIA_VISIBLE_DEVICES
              value: "void"
            - name: TZ
              value: "UTC"
            - name: "ALLOW_EMPTY_PASSWORD"
              value: "yes"
            - name: "REDIS_PASSWORD"
              valueFrom:
                secretKeyRef:
                  key: redis-password
                  name: 'rediscreds'
            - name: "REDIS_PORT"
              value: "6379"
            - name: "REDIS_REPLICATION_MODE"
              value: "master"
          envFrom:
          ports:
            - name: main
              containerPort: 6379
              protocol: TCP
          volumeMounts:
            
            - mountPath: /health
              name: redis-health
            - mountPath: /shared
              name: shared
            - mountPath: /dev/shm
              name: shm
            - mountPath: /tmp
              name: temp
            - mountPath: /var/logs
              name: varlogs
            - mountPath: /bitnami/redis
              name: data
          livenessProbe:
            exec:
              command:
              - sh
              - -c
              - /health/ping_liveness_local.sh 2
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command:
              - sh
              - -c
              - /health/ping_readiness_local.sh 2
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          startupProbe:
            exec:
              command:
              - sh
              - -c
              - /health/ping_readiness_local.sh 2
            failureThreshold: 60
            initialDelaySeconds: 10
            periodSeconds: 5
            timeoutSeconds: 2
          
          resources:
            limits:
              cpu: 4000m
              memory: 8Gi
            requests:
              cpu: 10m
              memory: 50Mi
      volumes:
        - name: redis-health
          configMap:
            defaultMode: 493
            name: 'misskey-redis-health'
        - name: shared
          emptyDir:
            {}
        - name: shm
          emptyDir:
            medium: Memory
        - name: temp
          emptyDir:
            {}
        - name: varlogs
          emptyDir:
            {}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "999Gi"

