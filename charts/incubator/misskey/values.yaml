image:
  repository: misskey/misskey
  pullPolicy: IfNotPresent
  tag: 12.119.0@sha256:a7beecb59b5089068463ca3847ac34dcb8445108da75ed8f56822f670053aa31
securityContext:
  readOnlyRootFilesystem: false
  runAsNonRoot: false

podSecurityContext:
  runAsUser: 0
  runAsGroup: 0
  fsGroup: 33

service:
  main:
    ports:
      main:
        port: 3000
        targetPort: 3000

hostAliases:
  - ip: '{{ .Values.env.AccessIP | default "127.0.0.1" }}'
    hostnames:
      - "{{ if .Values.ingress.main.enabled }}{{ with (first .Values.ingress.main.hosts) }}{{ .host }}{{ end }}{{ else }}placeholder.fakedomain.dns{{ end }}"


initContainers:
  prestart:
    image: '{{ include "tc.common.images.selector" . }}'
    securityContext:
      runAsUser: 0
      runAsGroup: 0
      privileged: true
    env:
      # IP used for exposing misskey
      # Often the service or nodePort IP
      # Defaults to the main serviceName for CI purposes.
      - name: POSTGRES_PASSWORD
        valueFrom:
          secretKeyRef:
            name: dbcreds
            key: postgresql-password
      - name: POSTGRES_HOST
        valueFrom:
          secretKeyRef:
            name: dbcreds
            key: plainporthost
      - name: REDIS_HOST
        valueFrom:
          secretKeyRef:
            name: rediscreds
            key: plainhost
      - name: REDIS_HOST_PASSWORD
        valueFrom:
          secretKeyRef:
            name: rediscreds
            key: redis-password
    # Modify mount permissions and inject postgres/redis secrets into config file
    command:
      - "/bin/sh"
      - "-c"
      - |
        /bin/bash <<'EOF'
        echo "Forcing permissions on userdata folder..."
        if nfs4xdr_getfacl && nfs4xdr_getfacl | grep -qv "Failed to get NFSv4 ACL"; then
          echo "NFSv4 ACLs detected, Trying to override permissions using nfs4_setfacl..."
          nfs4_setfacl -R -a A:g:33:RWX "/misskey/files"
        else
          echo "No NFSv4 ACLs detected, trying to override permissions using chown/chmod..."
          echo "checking ownership..."
          if [ $(stat -c %g .) -eq 33 ]; then
            echo "Ownership already set to 33, skipping..."
          else
            echo "Changing ownership to group 33..."
            chown -R :33 "/misskey/files"
          fi
          chmod 770 /misskey/files
        fi
        cp /var/misskey/.config/default.yml /misskey/.config/
        sed -i "s/POSTGRES_HOST/$POSTGRES_HOST/" /misskey/.config/default.yml
        sed -i "s/POSTGRES_PASSWORD/$POSTGRES_PASSWORD/" /misskey/.config/default.yml
        sed -i "s/REDIS_HOST/$REDIS_HOST/" /misskey/.config/default.yml
        sed -i "s/REDIS_PASSWORD/$REDIS_HOST_PASSWORD/" /misskey/.config/default.yml
        EOF

    volumeMounts:
      - name: files
        mountPath: "/misskey/files"
      - name: misskeyconfig-src
        mountPath: "/var/misskey/.config"
      - name: misskeyconfig
        mountPath: "/misskey/.config"

misskey:
  # Final accessible URL seen by a user. ONCE YOU HAVE STARTED THE INSTANCE, DO NOT CHANGE THE URL SETTINGS AFTER THAT!
  url: "https://example.tld/"
  # ID generation method. 'aid' recommended.
  id: "aid"

env:
  # IP used for exposing misskey
  # Often the service or nodePort IP
  # Defaults to the main serviceName for CI purposes.
  # NODE_ENV = production | development
  NODE_ENV: production
  AccessIP:
  POSTGRES_DB: "{{ .Values.postgresql.postgresqlDatabase }}"
  POSTGRES_USER: "{{ .Values.postgresql.postgresqlUsername }}"
  POSTGRES_PASSWORD:
    secretKeyRef:
      name: dbcreds
      key: postgresql-password
  POSTGRES_HOST:
    secretKeyRef:
      name: dbcreds
      key: plainporthost
  REDIS_HOST:
    secretKeyRef:
      name: rediscreds
      key: plainhost
  REDIS_HOST_PASSWORD:
    secretKeyRef:
      name: rediscreds
      key: redis-password

persistence:
  misskeyconfig-src:
    enabled: true
    type: configMap
    objectName: misskeyconfig
    mountPath: "/var/misskey/.config"
  # contains final config file with db secrets
  misskeyconfig:
    enabled: true
    mountPath: "/misskey/.config"
  files:
    enabled: true
    mountPath: "/misskey/files"
  varrun:
    enabled: true

postgresql:
  enabled: true
  existingSecret: "dbcreds"
  postgresqlUsername: misskey
  postgresqlDatabase: misskey

redis:
  enabled: true
  existingSecret: "rediscreds"

portal:
  enabled: true

hpb:
  enabled: false
