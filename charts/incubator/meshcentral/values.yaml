image:
  repository: tccr.io/truecharts/meshcentral
  pullPolicy: IfNotPresent
  tag: v1.0.1@sha256:d8642b3909fcd1dad6b920629dac8e6e3a609230f38c9d62ca01ca67c26a4730

extraArgs: ["--cert", "$hostname"]

securityContext:
  readOnlyRootFilesystem: false
  runAsNonRoot: false

podSecurityContext:
  runAsUser: 0
  runAsGroup: 0

env:
  hostname: "test.example.com"
  reverseProxyUrl: "https://test.example.com"

service:
  main:
    ports:
      main:
        protocol: "HTTPS"
        port: 10205

initContainers:
  init:
    image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
    volumeMounts:
      - name: data
        mountPath: "/home/node/meshcentral/meshcentral-data"
    env:
      - name: hostname
        value: "{{ .Values.env.hostname }}"
      - name: reverseProxyUrl
        value: "{{ .Values.env.reverseProxyUrl }}"
      - name: svcPort
        value: "{{ .Values.service.main.ports.main.port }}"
      - name: "mongodbURL"
        valueFrom:
          secretKeyRef:
            name: mongodbcreds
            key: url
    command: ["/bin/sh", "-c"]
    args:
      - >
        export configfile='/home/node/meshcentral/meshcentral-data/config.json';
        if [ -f $configfile ]; then
          echo 'Config File exists, updating values...';

          # Update hostname
          sed -i 's/^    "cert":.*,$/    "cert": "'$hostname'",/1' $configfile;

          export lastreverse=$(cat /home/node/meshcentral/meshcentral-data/.lastreverse);
          if [ ! -z $lastreverse ]; then
            if [[ $lastreverse == "NOT_PROVIDED" ]]; then
              # Update reverseProxyUrl
              echo "Updating $lastreverse to $reverseProxyUrl...";
              sed -i 's/^      "_certUrl": "'$lastreverse'",$/      "certUrl": "'$reverseProxyUrl'",/1' $configfile;
            else
              echo "Updating $lastreverse to $reverseProxyUrl...";
              sed -i 's/^      "certUrl": "'$lastreverse'",$/      "certUrl": "'$reverseProxyUrl'",/1' $configfile;
            fi;
            # Save new url
            echo $reverseProxyUrl > /home/node/meshcentral/meshcentral-data/.lastreverse;
          fi;

          export lastport=$(cat /home/node/meshcentral/meshcentral-data/.lastport);
          if [ ! -z $lastport ]; then
            # Update port
            echo "Updating $lastport to $svcPort...";
            sed -i 's/^    "port": '$lastport',$/    "port": '$svcPort',/1' $configfile;
            # Save new port.
            echo "$svcPort" > /home/node/meshcentral/meshcentral-data/.lastport;
          fi;
        else
          echo 'Creating basic config to $configfile...';
          echo '{' >> $configfile;
          echo '  "$schema": "http://info.meshcentral.com/downloads/meshcentral-config-schema.json",' >> $configfile;
          echo '  "settings": {' >> $configfile;
          echo '    "port": '$svcPort',' >> $configfile;
          echo '    "mongoDb": "'$mongodbURL'",' >> $configfile;
          echo '    "cert": "'$hostname'"' >> $configfile;
          echo '  }' >> $configfile;
          echo '  "domains": {' >> $configfile;
          echo '    "": {' >> $configfile;
          if [ ! -z $reverseProxyUrl ]; then
            echo '      "certUrl": "'$reverseProxyUrl'"' >> $configfile;
            echo $reverseProxyUrl > /home/node/meshcentral/meshcentral-data/.lastreverse;
          else
            echo '      "_certUrl": "NOT_PROVIDED"' >> $configfile;
            echo "NOT_PROVIDED" > /home/node/meshcentral/meshcentral-data/.lastreverse;
          fi;
          echo '    }' >> $configfile;
          echo '  }' >> $configfile;
          echo '}' >> $configfile;
          # Save last port used
          echo "$svcPort" > /home/node/meshcentral/meshcentral-data/.lastport;
        fi;

mongodb:
  enabled: true
  mongodbUsername: meshcentral
  mongodbDatabase: meshcentral
  existingSecret: "mongodbcreds"

persistence:
  data:
    enabled: true
    mountPath: "/home/node/meshcentral/meshcentral-data"
  files:
    enabled: true
    mountPath: "/home/node/meshcentral/meshcentral-files"
