# Default values for Bitwarden.

image:
  registry: docker.io
  repository: authelia/authelia
  tag: 4.27.4
  pullPolicy: IfNotPresent
  pullSecrets: []
  # pullSecrets:
  #   - myPullSecretName

strategy:
  type: Recreate

services:
  main:
    port:
      port: 80

env: {}

envFrom:
  - configMapRef:
      name: secretsmap

envValueFrom:
  DATABASE_URL:
    secretKeyRef:
      name: dbcreds
      key: url

persistence:
  db:
    nameOverride: "db"
    enabled: true
    emptyDir: true
    accessMode: ReadWriteOnce
    size: 1Gi
    storageClass: ""

additionalVolumeMounts:
  - mountPath: /config/secrets/
    name: secrets
    readOnly: true
  - mountPath: /config
    name: config
    readOnly: false

additionalVolumes:
  - name: config
      configMap:
        name: autheliaconfig
        items:
        - key: configuration.yaml
          path: configuration.yaml
  - name: secrets
    secret:
      secretName: autheliasecret
      items:
      - key: JWT_TOKEN
        path: /config/secrets/jwt
      - key: SESSION_ENCRYPTION_KEY
        path: /config/secrets/session
        {{- if or .Values.configMap.storage.postgres .Values.configMap.storage.mysql }}
      - key: STORAGE_PASSWORD
        path: /config/secrets/storage
        {{- end }}
        {{- if .Values.configMap.authentication_backend.ldap }}
      - key: LDAP_PASSWORD
        path: /config/secrets/ldap
        {{- end }}
        {{- if or (include "authelia.configured.smtp" .) (include "authelia.configured.smtpSecret" .) }}
      - key: SMTP_PASSWORD
        path: /config/secrets/smtp
        {{- end }}
        {{- if and .Values.configMap.session.redis.enabled .Values.configMap.session.redis.enabledSecret }}
      - key: REDIS_PASSWORD
        path: /config/secrets/redis
        {{- end }}
        {{- if and .Values.configMap.session.redis.high_availability.enabled .Values.configMap.session.redis.high_availability.enabledSecret }}
      - key: REDIS_SENTINEL_PASSWORD
        path: /config/secrets/redis-sentinel
        {{- end }}
        {{- if .Values.configMap.duo_api }}
      - key: DUO_API_KEY
        path: /config/secrets/duo
        {{- end }}
        {{- if .Values.configMap.identity_providers.oidc.enabled }}
      - key: OIDC_PRIVATE_KEY
        path: /config/secrets/oidc-private-key
      - key: OIDC_HMAC_SECRET
        path: /config/secrets/oidc-hmac-secret


# Enabled postgres
# ... for more options see https://github.com/bitnami/charts/tree/master/bitnami/postgresql
postgresql:
  fullnameOverride: postgresql
  enabled: true
  postgresqlUsername: authelia
  postgresqlDatabase: authelia
  existingSecret: dbcreds
  persistence:
    enabled: true
    existingClaim: db

### TODO: Cut down the authelia crap
## Authelia Domain
## Should be the root domain you want to protect.
## For example if you have apps app1.example.com and app2.example.com it should be example.com
## This affects the ingress (partially sets the domain used) and configMap.
## Authelia must be served from the domain or a subdomain under it.
domain: example.com

##
## Authelia Config Map Generator
##
configMap:

  # Enable the configMap source for the Authelia config.
  # If this is false you need to provide a volumeMount via PV/PVC or other means that mounts to /config.
  enabled: true

  annotations: {}
  # annotations:
  #   myAnnotation: myValue

  labels: {}
  # labels:
  #   myLabel: myValue

  key: configuration.yaml

  existingConfigMap: ""

  ##
  ## Port sets the configured port for the daemon, service, and the probes.
  ## Default is 9091 and should not need to be changed.
  ##
  port: 9091

  ##
  ## Server Configuration
  ##
  server:
    ## Buffers usually should be configured to be the same value.
    ## Explanation at https://www.authelia.com/docs/configuration/server.html
    ## Read buffer size adjusts the server's max incoming request size in bytes.
    ## Write buffer size does the same for outgoing responses.
    read_buffer_size: 4096
    write_buffer_size: 4096
    ## Set the single level path Authelia listens on.
    ## Must be alphanumeric chars and should not contain any slashes.
    path: ""

  ## Level of verbosity for logs: info, debug, trace.
  log_level: debug
  ## Format the logs are written as: json, text.
  log_format: text
  ## TODO: Statefulness check should check if this is set, and the configMap should enable it.
  ## File path where the logs will be written. If not set logs are written to stdout.
  # log_file_path: /config/authelia.log

  ## Default redirection URL
  ##
  ## If user tries to authenticate without any referer, Authelia does not know where to redirect the user to at the end
  ## of the authentication process. This parameter allows you to specify the default redirection URL Authelia will use
  ## in such a case.
  ##
  ## Note: this parameter is optional. If not provided, user won't be redirected upon successful authentication.
  ## Default is https://www.<domain> (value at the top of the values.yaml).
  default_redirection_url: ""
  # default_redirection_url: https://example.com

  theme: light

  ##
  ## TOTP Configuration
  ##
  ## Parameters used for TOTP generation
  totp:
    ## The issuer name displayed in the Authenticator application of your choice
    ## See: https://github.com/google/google-authenticator/wiki/Key-Uri-Format for more info on issuer names
    ## Defaults to <domain>.
    issuer: ""
    ## The period in seconds a one-time password is current for. Changing this will require all users to register
    ## their TOTP applications again. Warning: before changing period read the docs link below.
    period: 30
    ## The skew controls number of one-time passwords either side of the current one that are valid.
    ## Warning: before changing skew read the docs link below.
    ## See: https://www.authelia.com/docs/configuration/one-time-password.html#period-and-skew to read the documentation.
    skew: 1

  ##
  ## Duo Push API Configuration
  ##
  ## Parameters used to contact the Duo API. Those are generated when you protect an application of type
  ## "Partner Auth API" in the management panel.
  duo_api:
    enabled: false
    hostname: api-123456789.example.com
    integration_key: ABCDEF

  ##
  ## Authentication Backend Provider Configuration
  ##
  ## Used for verifying user passwords and retrieve information such as email address and groups users belong to.
  ##
  ## The available providers are: `file`, `ldap`. You must use one and only one of these providers.
  authentication_backend:
    ## Disable both the HTML element and the API for reset password functionality
    disable_reset_password: false

    ## The amount of time to wait before we refresh data from the authentication backend. Uses duration notation.
    ## To disable this feature set it to 'disable', this will slightly reduce security because for Authelia, users will
    ## always belong to groups they belonged to at the time of login even if they have been removed from them in LDAP.
    ## To force update on every request you can set this to '0' or 'always', this will increase processor demand.
    ## See the below documentation for more information.
    ## Duration Notation docs:  https://www.authelia.com/docs/configuration/index.html#duration-notation-format
    ## Refresh Interval docs: https://www.authelia.com/docs/configuration/authentication/ldap.html#refresh-interval
    refresh_interval: 5m

    ## LDAP backend configuration.
    ##
    ## This backend allows Authelia to be scaled to more
    ## than one instance and therefore is recommended for
    ## production.
    ldap:

      ## Enable LDAP Backend.
      enabled: true

      ## The LDAP implementation, this affects elements like the attribute utilised for resetting a password.
      ## Acceptable options are as follows:
      ## - 'activedirectory' - For Microsoft Active Directory.
      ## - 'custom' - For custom specifications of attributes and filters.
      ## This currently defaults to 'custom' to maintain existing behaviour.
      ##
      ## Depending on the option here certain other values in this section have a default value, notably all of the
      ## attribute mappings have a default value that this config overrides, you can read more about these default values
      ## at https://www.authelia.com/docs/configuration/authentication/ldap.html#defaults
      implementation: activedirectory

      ## The url to the ldap server. Format: <scheme>://<address>[:<port>].
      ## Scheme can be ldap or ldaps in the format (port optional).
      url: ldap://openldap.default.svc.cluster.local

      ## Use StartTLS with the LDAP connection.
      start_tls: false

      tls:
        ## Server Name for certificate validation (in case it's not set correctly in the URL).
        server_name: ""

        ## Skip verifying the server certificate (to allow a self-signed certificate).
        ## In preference to setting this we strongly recommend you add the public portion of the certificate to the
        ## certificates directory which is defined by the `certificates_directory` option at the top of the config.
        skip_verify: false

        ## Minimum TLS version for either Secure LDAP or LDAP StartTLS.
        minimum_version: TLS1.2

      ## The base dn for every LDAP query.
      base_dn: DC=example,DC=com

      ## The attribute holding the username of the user. This attribute is used to populate the username in the session
      ## information. It was introduced due to #561 to handle case insensitive search queries. For you information,
      ## Microsoft Active Directory usually uses 'sAMAccountName' and OpenLDAP usually uses 'uid'. Beware that this
      ## attribute holds the unique identifiers for the users binding the user and the configuration stored in database.
      ## Therefore only single value attributes are allowed and the value must never be changed once attributed to a user
      ## otherwise it would break the configuration for that user. Technically, non-unique attributes like 'mail' can also
      ## be used but we don't recommend using them, we instead advise to use the attributes mentioned above
      ## (sAMAccountName and uid) to follow https://www.ietf.org/rfc/rfc2307.txt.
      username_attribute: ""

      ## An additional dn to define the scope to all users.
      additional_users_dn: OU=Users

      ## The users filter used in search queries to find the user profile based on input filled in login form.
      ## Various placeholders are available in the user filter:
      ## - {input} is a placeholder replaced by what the user inputs in the login form.
      ## - {username_attribute} is a mandatory placeholder replaced by what is configured in `username_attribute`.
      ## - {mail_attribute} is a placeholder replaced by what is configured in `mail_attribute`.
      ## - DON'T USE - {0} is an alias for {input} supported for backward compatibility but it will be deprecated in later
      ##   versions, so please don't use it.
      ##
      ## Recommended settings are as follows:
      ## - Microsoft Active Directory: (&({username_attribute}={input})(objectCategory=person)(objectClass=user))
      ## - OpenLDAP:
      ##   - (&({username_attribute}={input})(objectClass=person))
      ##   - (&({username_attribute}={input})(objectClass=inetOrgPerson))
      ##
      ## To allow sign in both with username and email, one can use a filter like
      ## (&(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person))
      users_filter: ""

      ## An additional dn to define the scope of groups.
      additional_groups_dn: OU=Groups

      ## The groups filter used in search queries to find the groups of the user.
      ## - {input} is a placeholder replaced by what the user inputs in the login form.
      ## - {username} is a placeholder replace by the username stored in LDAP (based on `username_attribute`).
      ## - {dn} is a matcher replaced by the user distinguished name, aka, user DN.
      ## - {username_attribute} is a placeholder replaced by what is configured in `username_attribute`.
      ## - {mail_attribute} is a placeholder replaced by what is configured in `mail_attribute`.
      ## - DON'T USE - {0} is an alias for {input} supported for backward compatibility but it will be deprecated in later
      ##   versions, so please don't use it.
      ## - DON'T USE - {1} is an alias for {username} supported for backward compatibility but it will be deprecated in
      ##   later version, so please don't use it.
      ##
      ## If your groups use the `groupOfUniqueNames` structure use this instead:
      ##    (&(uniquemember={dn})(objectclass=groupOfUniqueNames))
      groups_filter: ""

      ## The attribute holding the name of the group
      group_name_attribute: ""

      ## The attribute holding the mail address of the user. If multiple email addresses are defined for a user, only the
      ## first one returned by the LDAP server is used.
      mail_attribute: ""

      ## The attribute holding the display name of the user. This will be used to greet an authenticated user.
      display_name_attribute: ""

      ## The username of the admin user.
      user: CN=Authelia,DC=example,DC=com

    ##
    ## File (Authentication Provider)
    ##
    ## With this backend, the users database is stored in a file which is updated when users reset their passwords.
    ## Therefore, this backend is meant to be used in a dev environment and not in production since it prevents Authelia
    ## to be scaled to more than one instance. The options under 'password' have sane defaults, and as it has security
    ## implications it is highly recommended you leave the default values. Before considering changing these settings
    ## please read the docs page below:
    ## https://www.authelia.com/docs/configuration/authentication/file.html#password-hash-algorithm-tuning
    ##
    ## Important: Kubernetes (or HA) users must read https://www.authelia.com/docs/features/statelessness.html
    ##
    file:
      enabled: false
      path: /config/users_database.yml
      password:
        algorithm: argon2id
        iterations: 1
        key_length: 32
        salt_length: 16
        memory: 1024
        parallelism: 8

  ##
  ## Access Control Configuration
  ##
  ## Access control is a list of rules defining the authorizations applied for one resource to users or group of users.
  ##
  ## If 'access_control' is not defined, ACL rules are disabled and the 'bypass' rule is applied, i.e., access is allowed
  ## to anyone. Otherwise restrictions follow the rules defined.
  ##
  ## Note: One can use the wildcard * to match any subdomain.
  ## It must stand at the beginning of the pattern. (example: *.mydomain.com)
  ##
  ## Note: You must put patterns containing wildcards between simple quotes for the YAML to be syntactically correct.
  ##
  ## Definition: A 'rule' is an object with the following keys: 'domain', 'subject', 'policy' and 'resources'.
  ##
  ## - 'domain' defines which domain or set of domains the rule applies to.
  ##
  ## - 'subject' defines the subject to apply authorizations to. This parameter is optional and matching any user if not
  ##    provided. If provided, the parameter represents either a user or a group. It should be of the form
  ##    'user:<username>' or 'group:<groupname>'.
  ##
  ## - 'policy' is the policy to apply to resources. It must be either 'bypass', 'one_factor', 'two_factor' or 'deny'.
  ##
  ## - 'resources' is a list of regular expressions that matches a set of resources to apply the policy to. This parameter
  ##   is optional and matches any resource if not provided.
  ##
  ## Note: the order of the rules is important. The first policy matching (domain, resource, subject) applies.
  access_control:
    ## Default policy can either be 'bypass', 'one_factor', 'two_factor' or 'deny'. It is the policy applied to any
    ## resource if there is no policy to be applied to the user.
    default_policy: deny

    networks: []
    # networks:
    # - name: private
    #   networks:
    #   - 10.0.0.0/8
    #   - 172.16.0.0/12
    #   - 192.168.0.0/16
    # - name: vpn
    #   networks:
    #   - 10.9.0.0/16

    rules: []
    # rules:
    # - domain: public.example.com
    #   policy: bypass
    # - domain: "*.example.com"
    #   policy: bypass
    #   methods:
    #   - OPTIONS

  ##
  ## Session Provider Configuration
  ##
  ## The session cookies identify the user once logged in.
  ## The available providers are: `memory`, `redis`. Memory is the provider unless redis is defined.
  session:
    ## The name of the session cookie. (default: authelia_session).
    name: authelia_session

    ## The time in seconds before the cookie expires and session is reset.
    expiration: 1h

    ## The inactivity time in seconds before the session is reset.
    inactivity: 5m

    ## The remember me duration.
    ## Value is in seconds, or duration notation. Value of 0 disables remember me.
    ## See: https://www.authelia.com/docs/configuration/index.html#duration-notation-format
    ## Longer periods are considered less secure because a stolen cookie will last longer giving attackers more time to
    ## spy or attack. Currently the default is 1M or 1 month.
    remember_me_duration: 1M

    ##
    ## Redis Provider
    ##
    ## Important: Kubernetes (or HA) users must read https://www.authelia.com/docs/features/statelessness.html
    ##
    ## The redis connection details
    redis:
      enabled: true
      enabledSecret: false
      host: redis.databases.svc.cluster.local
      port: 6379

      ## Optional username to be used with authentication.
      username: authelia

      ## This is the Redis DB Index https://redis.io/commands/select (sometimes referred to as database number, DB, etc).
      database_index: 0

      ## The maximum number of concurrent active connections to Redis.
      maximum_active_connections: 8

      ## The target number of idle connections to have open ready for work. Useful when opening connections is slow.
      minimum_idle_connections: 0

      ## The Redis TLS configuration. If defined will require a TLS connection to the Redis instance(s).
      tls:
        enabled: false

        ## Server Name for certificate validation (in case you are using the IP or non-FQDN in the host option).
        server_name: ""

        ## Skip verifying the server certificate (to allow a self-signed certificate).
        ## In preference to setting this we strongly recommend you add the public portion of the certificate to the
        ## certificates directory which is defined by the `certificates_directory` option at the top of the config.
        skip_verify: false

        ## Minimum TLS version for the connection.
        minimum_version: TLS1.2

      ## The Redis HA configuration options.
      ## This provides specific options to Redis Sentinel, sentinel_name must be defined (Master Name).
      high_availability:
        enabled: false
        enabledSecret: false
        ## Sentinel Name / Master Name
        sentinel_name: mysentinel

        ## The additional nodes to pre-seed the redis provider with (for sentinel).
        ## If the host in the above section is defined, it will be combined with this list to connect to sentinel.
        ## For high availability to be used you must have either defined; the host above or at least one node below.
        nodes: []
        # nodes:
        #   - host: sentinel-0.databases.svc.cluster.local
        #     port: 26379
        #   - host: sentinel-1.databases.svc.cluster.local
        #     port: 26379

        ## Choose the host with the lowest latency.
        route_by_latency: false

        ## Choose the host randomly.
        route_randomly: false

  ##
  ## Regulation Configuration
  ##
  ## This mechanism prevents attackers from brute forcing the first factor. It bans the user if too many attempts are done
  ## in a short period of time.
  regulation:
    ## The number of failed login attempts before user is banned. Set it to 0 to disable regulation.
    max_retries: 3

    ## The time range during which the user can attempt login before being banned. The user is banned if the
    ## authentication failed 'max_retries' times in a 'find_time' seconds window. Find Time accepts duration notation.
    ## See: https://www.authelia.com/docs/configuration/index.html#duration-notation-format
    find_time: 2m

    ## The length of time before a banned user can login again. Ban Time accepts duration notation.
    ## See: https://www.authelia.com/docs/configuration/index.html#duration-notation-format
    ban_time: 5m

  ##
  ## Storage Provider Configuration
  ##
  ## The available providers are: `local`, `mysql`, `postgres`. You must use one and only one of these providers.
  storage:
    ##
    ## Local (Storage Provider)
    ##
    ## This stores the data in a SQLite3 Database.
    ## This is only recommended for lightweight non-stateful installations.
    ##
    ## Important: Kubernetes (or HA) users must read https://www.authelia.com/docs/features/statelessness.html
    ##
    local:
      enabled: false
      path: /config/db.sqlite3

    ##
    ## PostgreSQL (Storage Provider)
    ##
    postgres:
      enabled: true
      host: 127.0.0.1
      port: 5432
      database: authelia
      username: authelia
      sslmode: disable

  ##
  ## Notification Provider
  ##
  ##
  ## Notifications are sent to users when they require a password reset, a u2f registration or a TOTP registration.
  ## The available providers are: filesystem, smtp. You must use one and only one of these providers.
  notifier:
    ## You can disable the notifier startup check by setting this to true.
    disable_startup_check: false

    ##
    ## File System (Notification Provider)
    ##
    ## Important: Kubernetes (or HA) users must read https://www.authelia.com/docs/features/statelessness.html
    ##
    filesystem:
      enabled: false
      filename: /config/notification.txt

    ##
    ## SMTP (Notification Provider)
    ##
    ## Use a SMTP server for sending notifications. Authelia uses the PLAIN or LOGIN methods to authenticate.
    ## [Security] By default Authelia will:
    ##   - force all SMTP connections over TLS including unauthenticated connections
    ##      - use the disable_require_tls boolean value to disable this requirement
    ##        (only works for unauthenticated connections)
    ##   - validate the SMTP server x509 certificate during the TLS handshake against the hosts trusted certificates
    ##     (configure in tls section)
    smtp:
      enabled: true
      enabledSecret: false
      username: test
      host: smtp.mail.svc.cluster.local
      port: 25
      sender: admin@example.com
      ## HELO/EHLO Identifier. Some SMTP Servers may reject the default of localhost.
      identifier: localhost
      ## Subject configuration of the emails sent.
      ## {title} is replaced by the text from the notifier
      subject: "[Authelia] {title}"
      ## This address is used during the startup check to verify the email configuration is correct.
      ## It's not important what it is except if your email server only allows local delivery.
      startup_check_address: test@authelia.com
      disable_require_tls: false
      disable_html_emails: false

      tls:
        ## Server Name for certificate validation (in case you are using the IP or non-FQDN in the host option).
        server_name: ""

        ## Skip verifying the server certificate (to allow a self-signed certificate).
        ## In preference to setting this we strongly recommend you add the public portion of the certificate to the
        ## certificates directory which is defined by the `certificates_directory` option at the top of the config.
        skip_verify: false

        ## Minimum TLS version for either StartTLS or SMTPS.
        minimum_version: TLS1.2

  identity_providers:
    oidc:
      ## Enables this in the config map. Currently in alpha stage there is no official build supporting OIDC.
      ## This exists for testing and preparation.
      enabled: false
      clients:
      - id: myapp
        description: My Application
        ## Secret shared between client and OP. Must be bcrypt hashed.
        secret: $2y$12$Bk1mw11OwVlG0uYWVJaoEuDkbL62FpEUsq59CXzPbe5oL61zR4XoG
        ## Policy is either one_factor or two_factor.
        policy: two_factor
        ## List of valid redirect URIs
        redirect_uris:
        - https://oidc.example.com/oauth2/callback
        scopes:
        - openid
        - profile
        - email
        - groups
        grant_types:
        - refresh_token
        - authorization_code
        response_types:
        - code

##
## Authelia Secret Generator.
##
## If both the values and existingSecret are not defined, this chart randomly generates a new secret on each
## install. It is recommended that you use something like sealed-secrets (https://github.com/bitnami-labs/sealed-secrets)
## and use the existingSecrets. All secrets can be stored in a single k8s secret if desired using the key option.
##
autheliasecret:
  existingSecret: ""
  # existingSecret: authelia

  annotations: {}
  # annotations:
  #   myAnnotation: myValue

  labels: {}
  # labels:
  #   myLabel: myValue

  mountPath: /config/secrets

  ## Secrets.
  jwt:
    key: JWT_TOKEN
    # value:
    filename: JWT_TOKEN
  ldap:
    key: LDAP_PASSWORD
    # value:
    filename: LDAP_PASSWORD
  storage:
    key: STORAGE_PASSWORD
    # value:
    filename: STORAGE_PASSWORD
  session:
    key: SESSION_ENCRYPTION_KEY
    # value:
    filename: SESSION_ENCRYPTION_KEY
  duo:
    key: DUO_API_KEY
    # value:
    filename: DUO_API_KEY
  redis:
    key: REDIS_PASSWORD
    # value:
    filename: REDIS_PASSWORD
  redisSentinel:
    key: REDIS_SENTINEL_PASSWORD
    # value:
    filename: REDIS_SENTINEL_PASSWORD
  smtp:
    key: SMTP_PASSWORD
    # value:
    filename: SMTP_PASSWORD
  oidcPrivateKey:
    key: OIDC_PRIVATE_KEY
    # value:
    filename: OIDC_PRIVATE_KEY
  oidcHMACSecret:
    key: OIDC_HMAC_SECRET
    # value:
    filename: OIDC_HMAC_SECRET
